name: Setup Project Board

on:
  workflow_dispatch:

jobs:
  setup-project-board:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      issues: write
      repository-projects: write
      id-token: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Create Project Board
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            // Get the owner node ID
            const ownerQuery = `
              query {
                user(login: "${context.repo.owner}") {
                  id
                }
              }
            `;
            
            try {
              // Get the owner node ID
              const ownerResponse = await github.graphql(ownerQuery);
              const ownerId = ownerResponse.user.id;
              console.log(`Owner ID: ${ownerId}`);
              
              // Create a new project (v2)
              const createProjectQuery = `
                mutation {
                  createProjectV2(input: {title: "Trading Algorithm Feature Board", ownerId: "${ownerId}"}) {
                    projectV2 {
                      id
                      number
                    }
                  }
                }
              `;
              
              const projectResponse = await github.graphql(createProjectQuery);
              const projectId = projectResponse.createProjectV2.projectV2.id;
              const projectNumber = projectResponse.createProjectV2.projectV2.number;
              
              console.log(`Created project: ${projectId} (Number: ${projectNumber})`);
              
              // Create a custom field for status
              const createFieldQuery = `
                mutation {
                  createProjectV2Field(input: {projectId: "${projectId}", dataType: SINGLE_SELECT, name: "Status"}) {
                    projectV2Field {
                      id
                      name
                    }
                  }
                }
              `;
              
              const fieldResponse = await github.graphql(createFieldQuery);
              const fieldId = fieldResponse.createProjectV2Field.projectV2Field.id;
              
              console.log(`Created Status field: ${fieldId}`);
              
              // Create status options
              const statuses = [
                "Loose Ideas",
                "Backlog",
                "ToDo",
                "In Progress",
                "In Review",
                "Done"
              ];
              
              const optionIds = {};
              
              for (const status of statuses) {
                const createOptionQuery = `
                  mutation {
                    createProjectV2FieldOption(input: {projectId: "${projectId}", fieldId: "${fieldId}", name: "${status}"}) {
                      projectV2FieldOption {
                        id
                        name
                      }
                    }
                  }
                `;
                
                const optionResponse = await github.graphql(createOptionQuery);
                const optionId = optionResponse.createProjectV2FieldOption.projectV2FieldOption.id;
                optionIds[status] = optionId;
                
                console.log(`Created option ${status}: ${optionId}`);
              }
              
              // Get all issues
              const issues = await github.rest.issues.listForRepo({
                owner: context.repo.owner,
                repo: context.repo.repo,
                state: 'open',
                per_page: 100
              });
              
              // Issue categories
              const issueCategories = {
                'Initialize Project Repository': 'Loose Ideas',
                'Set Up Configuration Management': 'Backlog',
                'Implement Logging and Error Handling': 'Backlog',
                'Create Base Service Architecture': 'ToDo',
                'Implement Historical Data Collection Service': 'ToDo',
                'Implement Technical Indicators Calculation': 'ToDo',
                'Implement Market Structure Analysis Model': 'In Progress',
                'Implement Open Interest vs Price Divergence Analysis': 'In Progress',
                'Implement Spot vs Perp CVD Analysis': 'Backlog',
                'Implement Delta Volume Analysis': 'Backlog',
                'Implement Liquidation Analysis': 'Backlog',
                'Implement Funding Rate Analysis': 'Backlog',
                'Implement Gamma Exposure Analysis': 'Loose Ideas',
                'Implement Macro Events Analysis': 'Loose Ideas',
                'Implement Cross-Asset Correlation Analysis': 'In Review',
                'Implement On-Chain Analysis': 'Loose Ideas',
                'Implement Signal Integration Service': 'ToDo',
                'Implement Trading Signal Generator': 'ToDo',
                'Implement Signal Visualization': 'Done',
                'Implement Notification Service': 'Done'
              };
              
              // Add issues to project
              for (const issue of issues.data) {
                // Add issue to project
                const addIssueQuery = `
                  mutation {
                    addProjectV2ItemById(input: {projectId: "${projectId}", contentId: "${issue.node_id}"}) {
                      item {
                        id
                      }
                    }
                  }
                `;
                
                const addResponse = await github.graphql(addIssueQuery);
                const itemId = addResponse.addProjectV2ItemById.item.id;
                
                // Set status
                const category = issueCategories[issue.title] || 'Backlog';
                const optionId = optionIds[category];
                
                if (optionId) {
                  const setStatusQuery = `
                    mutation {
                      updateProjectV2ItemFieldValue(input: {
                        projectId: "${projectId}", 
                        itemId: "${itemId}", 
                        fieldId: "${fieldId}", 
                        value: {
                          singleSelectOptionId: "${optionId}"
                        }
                      }) {
                        projectV2Item {
                          id
                        }
                      }
                    }
                  `;
                  
                  await github.graphql(setStatusQuery);
                  console.log(`Added issue #${issue.number} (${issue.title}) to column ${category}`);
                }
              }
              
              console.log(`Project board setup complete! View at https://github.com/users/${context.repo.owner}/projects/${projectNumber}`);
            } catch (error) {
              console.error('Error creating project:', error);
              core.setFailed(`Error creating project: ${error.message}`);
            }